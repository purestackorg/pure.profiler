
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using Pure.Profiler.Timings;

namespace Pure.Profiler.Data
{
    /// <summary>
    /// A <see cref="IDbCommand"/> wrapper which supports DB profiling.
    /// </summary>
    public class ProfiledDbCommand : DbCommand, ICloneable, IDbCommand
    {
        private readonly IDbCommand _command;
        private readonly DbCommand _dbCommand;
        private readonly Func<IDbProfiler> _getDbProfiler;
        private DbParameterCollection _dbParameterCollection;

        #region Properties

        /// <summary>
        /// Gets or sets the tags of the <see cref="DbTiming"/> which will be created internally.
        /// </summary>
        public TagCollection Tags { get; set; }

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a <see cref="ProfiledDbCommand"/>.
        /// </summary>
        /// <param name="command">The <see cref="IDbCommand"/> to be profiled.</param>
        /// <param name="dbProfiler">The <see cref="IDbProfiler"/>.</param>
        /// <param name="tags">The tags of the <see cref="DbTiming"/> which will be created internally.</param>
        public ProfiledDbCommand(IDbCommand command, IDbProfiler dbProfiler, IEnumerable<string> tags = null)
            : this(command, dbProfiler, tags == null ? null : new TagCollection(tags))
        {
        }

        /// <summary>
        /// Initializes a <see cref="ProfiledDbCommand"/>.
        /// </summary>
        /// <param name="command">The <see cref="IDbCommand"/> to be profiled.</param>
        /// <param name="dbProfiler">The <see cref="IDbProfiler"/>.</param>
        /// <param name="tags">The tags of the <see cref="DbTiming"/> which will be created internally.</param>
        public ProfiledDbCommand(IDbCommand command, IDbProfiler dbProfiler, TagCollection tags)
            : this(command, () => dbProfiler, tags)
        {
        }

        /// <summary>
        /// Initializes a <see cref="ProfiledDbCommand"/>.
        /// </summary>
        /// <param name="command">The <see cref="IDbCommand"/> to be profiled.</param>
        /// <param name="getDbProfiler">Gets the <see cref="IDbProfiler"/>.</param>
        /// <param name="tags">The tags of the <see cref="DbTiming"/> which will be created internally.</param>
        public ProfiledDbCommand(IDbCommand command, Func<IDbProfiler> getDbProfiler, IEnumerable<string> tags = null)
            : this(command, getDbProfiler, tags == null ? null : new TagCollection(tags))
        {
        }

        /// <summary>
        /// Initializes a <see cref="ProfiledDbCommand"/>.
        /// </summary>
        /// <param name="command">The <see cref="IDbCommand"/> to be profiled.</param>
        /// <param name="getDbProfiler">Gets the <see cref="IDbProfiler"/>.</param>
        /// <param name="tags">The tags of the <see cref="DbTiming"/> which will be created internally.</param>
        public ProfiledDbCommand(IDbCommand command, Func<IDbProfiler> getDbProfiler, TagCollection tags)
        {
            if (command == null)
            {
                throw new ArgumentNullException("command");
            }

            if (getDbProfiler == null)
            {
                throw new ArgumentNullException("getDbProfiler");
            }

            _command = command;
            _dbCommand = command as DbCommand;
            _getDbProfiler = getDbProfiler;

            Tags = tags;
        }

        #endregion

        #region DbCommand Members

        /// <summary>
        /// Attempts to cancels the execution of a <see cref="DbCommand"/>.
        /// </summary>
        public override void Cancel()
        {
            _command.Cancel();
        }

        /// <summary>
        /// Gets or sets the text command to run against the data source. 
        /// </summary>
        public override string CommandText
        {
            get
            {
                return _command.CommandText;
            }
            set
            {
                _command.CommandText = value;
            }
        }

        /// <summary>
        /// Gets or sets the wait time before terminating the attempt to execute a command and generating an error. 
        /// </summary>
        public override int CommandTimeout
        {
            get
            {
                return _command.CommandTimeout;
            }
            set
            {
                _command.CommandTimeout = value;
            }
        }

        /// <summary>
        /// Indicates or specifies how the <see cref="CommandText"/> property is interpreted. 
        /// </summary>
        public override CommandType CommandType
        {
            get
            {
                return _command.CommandType;
            }
            set
            {
                _command.CommandType = value;
            }
        }

        /// <summary>
        /// Creates a new instance of a <see cref="DbParameter"/> object. 
        /// </summary>
        /// <returns>Returns the created <see cref="DbParameter"/>.</returns>
        protected override DbParameter CreateDbParameter()
        {
            if (_dbCommand != null)
            {
                return _dbCommand.CreateParameter();
            }

            return new DbParameterWrapper(_command.CreateParameter());
        }

        /// <summary>
        /// Gets or sets the <see cref="DbConnection"/> used by this DbCommand. 
        /// </summary>
        protected override DbConnection DbConnection
        {
            get
            {
                return _dbCommand.Connection;
            }
            set
            {
                if (value is ProfiledDbConnection)
                    _dbCommand.Connection = (value as ProfiledDbConnection).WrappedConnection;
                else
                    _dbCommand.Connection = value;
            }
        }

        IDbConnection IDbCommand.Connection
        {
            get
            {
                return _command.Connection;
            }
            set
            {
                if (value is ProfiledDbConnection)
                    _command.Connection = (value as ProfiledDbConnection).WrappedConnection;
                else
                    _command.Connection = value;
            }
        }

        /// <summary>
        /// Gets the collection of <see cref="DbParameter"/> objects. 
        /// </summary>
        protected override DbParameterCollection DbParameterCollection
        {
            get
            {
                if (_command.Parameters == null && (_dbCommand == null || _dbCommand.Parameters == null))
                {
                    return null;
                }

                if (_dbParameterCollection == null)
                {
                    if (_dbCommand != null)
                    {
                        _dbParameterCollection = _dbCommand.Parameters;
                    }
                    else if (_command.Parameters != null)
                    {
                        _dbParameterCollection = new DbParameterCollectionWrapper(_command.Parameters);
                    }
                }

                return _dbParameterCollection;
            }
        }

        /// <summary>
        /// Gets or sets the <see cref="DbTransaction"/> within which this <see cref="DbCommand"/> object executes. 
        /// </summary>
        protected override DbTransaction DbTransaction
        {
            get
            {
                return _dbCommand.Transaction;
            }
            set
            {
                if (value is ProfiledDbTransaction)
                    _dbCommand.Transaction = (value as ProfiledDbTransaction).WrappedTransaction;
                else
                    _dbCommand.Transaction = value;
            }
        }

        IDbTransaction IDbCommand.Transaction
        {
            get
            {
                return _command.Transaction;
            }
            set
            {
                if (value is ProfiledDbTransaction)
                    _command.Transaction = (value as ProfiledDbTransaction).WrappedTransaction;
                else
                    _command.Transaction = value;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the command object should be visible in a customized interface control. 
        /// </summary>
        public override bool DesignTimeVisible
        {
            get
            {
                if (_dbCommand != null)
                {
                    return _dbCommand.DesignTimeVisible;
                }

                return false;
            }
            set
            {
                if (_dbCommand != null)
                {
                    _dbCommand.DesignTimeVisible = value;
                }
            }
        }

        /// <summary>
        /// Executes the command text against the connection. 
        /// </summary>
        /// <param name="behavior">The <see cref="CommandBehavior"/>.</param>
        /// <returns></returns>
        protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
        {
            var dbProfiler = _getDbProfiler();
            if (dbProfiler == null) return _dbCommand.ExecuteReader();

            try
            {


                IDataReader reader = null;
                reader = dbProfiler.ExecuteDbCommand(
                    DbExecuteType.Reader
                    , _command
                    , () => {
                        reader = _dbCommand.ExecuteReader(behavior);

                        return reader;
                    }
                    , Tags);

                var profiledReader = reader as ProfiledDbDataReader;
                if (profiledReader != null)
                {
                    return profiledReader;
                }

                return new ProfiledDbDataReader(reader, dbProfiler);
            }
            catch (Exception ex)
            {
                if (Tags == null)
                {
                    Tags = new TagCollection();

                }
                Tags.Add(ProfilingSession.FailOnErrorMark);
                DbTiming dbTiming = new DbTiming(ProfilingSession.Current.Profiler, DbExecuteType.Reader, _command, 0) { Tags = Tags };
                // if not executing reader, stop the sql timing right after execute()
                dbTiming.Stop();

                throw ex;
            }

        }

        IDataReader IDbCommand.ExecuteReader()
        {
            return _command.ExecuteReader(CommandBehavior.Default);
        }

        IDataReader IDbCommand.ExecuteReader(CommandBehavior behavior)
        {
            var dbProfiler = _getDbProfiler();
            if (dbProfiler == null) return _command.ExecuteReader();

            try
            {

                IDataReader reader = null;
                reader = dbProfiler.ExecuteDbCommand(
                    DbExecuteType.Reader
                    , _command
                    , () => {
                        reader = _dbCommand.ExecuteReader(behavior);

                        return reader;
                    }
                    , Tags);

                var profiledReader = reader as ProfiledDbDataReader;
                if (profiledReader != null)
                {
                    return profiledReader;
                }

                return new ProfiledDbDataReader(reader, dbProfiler);
            }
            catch (Exception ex)
            {
                if (Tags == null)
                {
                    Tags = new TagCollection();

                }
                Tags.Add(ProfilingSession.FailOnErrorMark);
                DbTiming dbTiming = new DbTiming(ProfilingSession.Current.Profiler, DbExecuteType.Reader, _command, 0) { Tags = Tags };
                // if not executing reader, stop the sql timing right after execute()
                dbTiming.Stop();

                throw ex;
            }

        }

        /// <summary>
        /// Executes a SQL statement against a connection object. 
        /// </summary>
        /// <returns>Returns The number of rows affected. </returns>
        public override int ExecuteNonQuery()
        {
            var dbProfiler = _getDbProfiler();
            if (dbProfiler == null) return _command.ExecuteNonQuery();

            try
            {
                int affected = 0;
                dbProfiler.ExecuteDbCommand(
                    DbExecuteType.NonQuery, _command, () => { affected = _command.ExecuteNonQuery(); return affected; }, Tags);
                return affected;
            }
            catch (Exception ex)
            {
                if (Tags == null)
                {
                    Tags = new TagCollection();

                }
                Tags.Add(ProfilingSession.FailOnErrorMark);
                DbTiming dbTiming = new DbTiming(ProfilingSession.Current.Profiler, DbExecuteType.NonQuery, _command, 0) { Tags = Tags };
                // if not executing reader, stop the sql timing right after execute()
                dbTiming.Stop();

                throw ex;
            }
        
        }

        /// <summary>
        /// Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored. 
        /// </summary>
        /// <returns>The first column of the first row in the result set. </returns>
        public override object ExecuteScalar()
        {
            var dbProfiler = _getDbProfiler();
            if (dbProfiler == null) return _command.ExecuteScalar();

            try
            {
                object returnValue = null;
                dbProfiler.ExecuteDbCommand(
                    DbExecuteType.Scalar, _command, () => { returnValue = _command.ExecuteScalar(); return returnValue; }, Tags);
                return returnValue;
            }
            catch (Exception ex)
            {
                if (Tags == null)
                {
                    Tags = new TagCollection();

                }
                Tags.Add(ProfilingSession.FailOnErrorMark);
                DbTiming dbTiming = new DbTiming(ProfilingSession.Current.Profiler, DbExecuteType.Scalar, _command, null) { Tags = Tags };
                // if not executing reader, stop the sql timing right after execute()
                dbTiming.Stop();

                throw ex;
            }
           
        }

        /// <summary>
        /// Creates a prepared (or compiled) version of the command on the data source.
        /// </summary>
        public override void Prepare()
        {
            _command.Prepare();
        }

        /// <summary>
        /// Gets or sets how command results are applied to the <see cref="DataRow"/> when used by the Update method of a <see cref="DbDataAdapter"/>. 
        /// </summary>
        public override UpdateRowSource UpdatedRowSource
        {
            get
            {
                return _command.UpdatedRowSource;
            }
            set
            {
                _command.UpdatedRowSource = value;
            }
        }

        /// <summary>
        /// Gets whether or not can raise events.
        /// </summary>
        protected override bool CanRaiseEvents
        {
            get
            {
                return true;
            }
        }

        /// <summary>
        /// Releases the unmanaged resources used by the <see cref="ProfiledDbCommand"/> and optionally releases the managed resources. 
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (_dbCommand == null)
                    _command.Dispose();
                else
                    _dbCommand.Dispose();
            }

            base.Dispose(disposing);
        }

        /// <summary>
        /// Clone
        /// </summary>
        /// <returns></returns>
        public object Clone()
        {
            var cmdCloneable = _dbCommand as ICloneable;
            var cmdClone = cmdCloneable == null ? _dbCommand : cmdCloneable.Clone() as DbCommand;

            return new ProfiledDbCommand(cmdClone, _getDbProfiler, Tags) { Connection = cmdClone.Connection };
        }

        #endregion
    }
}
